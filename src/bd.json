{"tasks":
    [
        {"id":1, "otwet": "typeof" , "vopros": "возвращает строку, указывающую тип операнда", "good":"", "before":"","after":"" ,"division":"strnum"},
        {"id":2,"otwet": "'trim" , "vopros": "удаляет пробелы", "good": "'text'.***()", "before":"'text'.","after":"()", "division":"strnum"},
        {"id":3,"otwet": "Number" , "vopros": "строку превращает в число (класс)", "good": "***('34')", "before":"","after":"('34')","division":"strnum"},
        {"id":4,"otwet": "String" , "vopros": "переводит число в строку (класс)", "good": "***(12)", "before":"","after":"(12)", "division":"strnum"},
        {"id":5,"otwet": "test" , "vopros": "выполняет поиск регулярного выражения", "good": "/reg/.***(//)", "before":"/reg/.","after":"('text')", "division":"strnum"},
        {"id":7,"otwet": "replace" , "vopros": " возвращает новую строку с некоторыми или всеми сопоставлениями с шаблоном, заменёнными на заменитель", "good": "'text'.***(//, fun)", "before":"'text'.","after":"(/reg/, () => {})","division":"strnum"},
        {"id":8,"otwet": "stringify" , "vopros": "преобразует в строку JSON", "good": "JSON.***(json)","before":"JSON.","after":"(json)",  "division":"strnum"},
        {"id":9,"otwet": "parse" , "vopros": "парсируе строку в формат JSON", "good": "JSON.***('str')","before":"JSON.","after":"('text')", "division":"strnum"},
        {"id":10,"otwet": "parseFloat" , "vopros": "отсекает у строки все лишнее оставляет число", "good": "***('str')", "before":"","after":"('text')","division":"strnum"},
        {"id":11,"otwet": "toLowerCase" , "vopros": "строку в нижний регистр", "good": "'text'.***()", "before":"'text'.","after":"()", "division":"strnum"},
        {"id":12,"otwet": "toUpperCase" , "vopros": "строку в верхний регистр", "good": "'text'.***()","before":"text.","after":"()", "division":"strnum"},
        {"id":13,"otwet": "substr" , "vopros": "возвращает указанное количество символов из строки, начиная с указанной позиции", "before":"'text'.","after":"(index)","good": "'str'.***(index,index)","division":"strnum"},
        {"id":14,"otwet": "isInteger" , "vopros": "проверяет является ли значение целым чеслом", "good": "10.***()","before":"10.","after":"()", "division":"strnum"},
        {"id":15,"otwet": "ceil" , "vopros": "Возвращает значение числа, округлённое к большему целому", "good": "Math.***(10.2)", "before":"Math.","after":"(10.2)","division":"strnum"},
        {"id":16,"otwet": "floor" , "vopros": "Возвращает значение числа, округлённое к меньшему целому", "good": "Math.***(10.2)", "before":"Math.","after":"(10.2)", "division":"strnum"},
        {"id":17,"otwet": "random" , "vopros": "Возвращает псевдослучайное число в диапазоне от 0 до 1", "good": "Math.***()","before":"Math.","after":"()","division":"strnum"},
        {"id":18,"otwet": "round" , "vopros": "Возвращает значение числа, округлённое до ближайшего целого", "good": "Math.***(10.2)", "before":"Math.","after":"(10.2)", "division":"strnum"},
        {"id":19,"otwet": "min" , "vopros": "возвращает минимальное число из перечисляных через запятую", "good": "Math.***(2,3)", "before":"Math.","after":"(10,2)", "division":"strnum"},
        {"id":20,"otwet": "max" , "vopros": "возвращает максимальное число из перечисляных через запятую", "good": "Math.***(2,4)", "before":"Math.","after":"(10,2)", "division":"strnum"},
        {"id":21,"otwet": "in" , "vopros": "цикл для перебора обьекта", "good": "for(let key ** obj)","before":"for(let key","after":"obj)", "division":"mas"},
        {"id":22,"otwet": "of" , "vopros": " цтикл переберает значение массива", "good": "for(let item ** arr)", "before":"for(let item","after":"arr)", "division":"mas"},
        {"id":23,"otwet": "map" , "vopros": "переберает массив и возвращает новый", "good": "[].***(fun)", "before":"[].","after":"(()=>{})","division":"mas"},
        {"id":24,"otwet": "filter" , "vopros": "собирает новый массив с условиями", "good": "[].***(fun) ","before":"[].","after":"(()=>{})", "division":"mas"},
        {"id":25,"otwet": "find" , "vopros": "ишет в массиве по условию возващает первоеинайденое значение", "good": "[].***(fun)", "before":"[]","after":"(()=>{})","division":"mas"},
        {"id":26,"otwet": "reducer" , "vopros": "применяет к каждому элементу массива, возвращая результирующее значение", "good": "[].***(fun)","before":"[]","after":"(()=>{})", "division":"mas"},
        {"id":27,"otwet": "some" , "vopros": "ишет в массиве по условию возващает true или false", "good": "[].***(fun)","before":"[].","after":"(()=>{})", "division":"mas"},
        {"id":28,"otwet": "every" , "vopros": "проверяет, удовлетворяют ли все элементы массива условию, заданному в передаваемой функции", "good": "[].***(fun)","before":"[]","after":"(()=>{})", "division":"mas"},
        {"id":29,"otwet": "push" , "vopros": "добовляет элемент к конец массива", "good": "[].***(10)", "before":"[].","after":"()","division":"mas"},
        {"id":30,"otwet": "unshift" , "vopros": "добовляет элемент в начало массива", "good": "[].***(10)", "before":"[].","after":"()","division":"mas"},
        {"id":31,"otwet": "pop" , "vopros": "удаляет элемент из конца массива", "good": "[].***()", "before":"[].","after":"()","division":"mas"},
        {"id":32,"otwet": "shift" , "vopros": "удаляет элемент из начала массива", "good": "[].***()","before":"[].","after":"()", "division":"mas"},
        {"id":33,"otwet": "slice" , "vopros": " возв. новый масив содер копию части другого массива", "good": "[].***(1,5)", "before":"[].","after":"(1,3)","division":"mas"},
        {"id":34,"otwet": "splice" , "vopros": "изменяет содержимое массива, удаляя существующие элементы и/или добавляя новые", "good": "[].***(0, 2, 'x')","before":"[].","after":"(0, 2)", "division":"mas"},
        {"id":35,"otwet": "split" , "vopros": "разбирает строку на массив", "good": "'str'.***('')", "before":"text","after":"('')", "division":"strnum"},
        {"id":36,"otwet": "join" , "vopros": "массив преобразует в строку", "good": "[].***('')", "before":"[].","after":"('')","division":"mas"},
        {"id":37,"otwet": "sort" , "vopros": "сортирует массив", "good": "[].***(fun)", "before":"[].","after":"((a,b)=>a-b)", "division":"mas"},
        {"id":38,"otwet": "reverse" , "vopros": "переворачивает массив", "good": "[].***()","before":"[].","after":"()", "division":"mas"},
        {"id":39,"otwet": "findIndex" , "vopros": "ишет в массиве по условию возвращает индекс", "good": "[].findIndex(fun)","before":"[ ].","after":"(()=>{})", "division":"mas"},
        {"id":40,"otwet": "..." , "vopros": "операор распостранения (разворачивает массив)", "good": "[***arr]","before":"[","after":"arr]", "division":"mas"},
        {"id":41,"otwet": "flat" , "vopros": "возвращает новый массив, в котором все элементы вложенных подмассивов были рекурсивно 'подняты'", "good": "[].***()","before":"[].","after":"( )", "division":"mas"},
        {"id":42,"otwet": "fill" , "vopros": "заполняет массив с указанной позиции определенным символом", "good": "[].***(3)", "before":"[ ]","after":"(3)","division":"mas"},
        {"id":43,"otwet": "concat" , "vopros": "соединяет массивы в один", "good": "[].***([])", "before":"[].","after":"([])","division":"mas"},
        {"id":44,"otwet": "Set" , "vopros": "позволяют вам сохранять уникальные значения любого типа", "good": "new ***(arr)", "before":"new ","after":"()","division":"mas"},
        {"id":45,"otwet": "includes" , "vopros": "определяет, содержит ли массив определённый элемент, возвращая в зависимости от этого true или false", "good": "[ ].***(2)", "before":"[ ].","after":"(2)","division":"mas"},
        {"id":46,"otwet": "indexOf" , "vopros": "проверка на наличие в массиве, строке -1 если не найдено", "good": "[].***('x')","before":"[ ]","after":"('x')", "division":"mas"},
        {"id":47,"otwet": "keys" , "vopros": "создает массив из ключей обьекта", "good": "Object.***({})", "before":"Object.","after":"({ })","division":"mas"},
        {"id":48,"otwet": "values" , "vopros": "создает массив из значений обьекта", "good": "Object.***({})", "before":"Object.","after":"({ })","division":"mas"},
        {"id":49,"otwet": "isArray" , "vopros": "проверка на массив", "good": "Array.***(x)", "before":"Array.","after":"(x)", "division":"mas"},
        {"id":52,"otwet": "getComputedStyle" , "vopros": "возвращает объект, содержащий значения всех CSS-свойств элемента", "good": "***(елемент, псевдоэлеиент)","before":"","after":"(element)", "division":"dom"},
        {"id":53,"otwet": "style" , "vopros": "свойство добовляет стиль элементу DOM", "good": "element.***.color=''","before":"element.","after":"color=''", "division":"dom"},
        {"id":54,"otwet": "classList.add" , "vopros": "Добавляет элементу DOM указанные классы", "good": "element.***.***('')", "before":"element.","after":"('')", "division":"dom"},
        {"id":55,"otwet": "classList.remove" , "vopros": "Удаляет у элемента DOM указанные классы", "good": "element.***.***('')","before":"element.","after":"('')", "division":"dom"},
        {"id":56,"otwet": "classList.item" , "vopros": "Результат аналогичен вызову сlassList[Number]", "good": "element.classList.***('')","before":"element.","after":"('')", "division":"dom"},
        {"id":57,"otwet": "classList.toggle" , "vopros": "Если класс у элемента DOM отсутствует - добавляет, иначе - убирает", "good": "element.***.***('')", "before":"element.","after":"('')","division":"dom"},
        {"id":58,"otwet": "classList.contains" , "vopros": "проверяет наличие класса", "good": "element.***.***('')","before":"element.","after":"('')", "division":"dom"},
        {"id":59,"otwet": "createElement" , "vopros": "создание элемента DOM", "good": "document.***('')", "before":"document.","after":"('')","division":"dom"},
        {"id":60,"otwet": "prepend" , "vopros": "вставляет элементы DOM перед первым потокоm", "good": "element.***('')", "before":"element.","after":"('')","division":"dom"},
        {"id":61,"otwet": "parentNode" , "vopros": "свойство получаем родителя текущего элемента DOM", "good": "element.***", "before":"element.","after":"","division":"dom"},
        {"id":62,"otwet": "nextSibling" , "vopros": "следующий узел  в списке дочерних элментов DOM", "good": "element.***", "before":"element.","after":"","division":"dom"},
        {"id":63,"otwet": "firstChild" , "vopros": "возвращает текст внутри элемента DOM", "good": "element.***", "before":"element.","after":"","division":"dom"},
        {"id":64,"otwet": "firstElementChild" , "vopros": "возвращает первый дочерний элемент DOM", "good": "element.***", "before":"element.","after":"","division":"dom"},
        {"id":65,"otwet": "closest" , "vopros": "ближайший родитель с указанным селектором DOM", "good": "element.***('')", "before":"element.","after":"('')","division":"dom"},
        {"id":66,"otwet": "setAttrebute" , "vopros": "добовляет атрибут элементу DOM", "good": "element.***('атрибут','значение')", "before":"element.","after":"()","division":"dom"},
        {"id":67,"otwet": "getAttrebute" , "vopros": " читает аттрибут DOM", "good": "element.***('')", "before":"element.","after":"('')","division":"dom"},
        {"id":68,"otwet": "hasAttrebute" , "vopros": "проверяет аттрибут элемента DOM возвращае true folse ", "good": "element.***('')", "before":"element.","after":"('')","division":"dom"},
        {"id":69,"otwet": "removeAttrebute" , "vopros": "удаляет атрибут элемента DOM ", "good": "element.***('')", "before":"element.","after":"('')","division":"dom"},
        {"id":70,"otwet": "dataset" , "vopros": "получаем атрибут data у элемента DOM", "good": "element.***", "before":"element.","after":"","division":"dom"},
        {"id":71,"otwet": "appendChild" , "vopros": "дабовлет новый элемент DOM в конец родителя", "good": "element.***('')","before":"element.","after":"('')", "division":"dom"},
        {"id":72,"otwet": "append" , "vopros": "дабовлет новый элемент в конец  указанного эллемента DOM", "good": "element.***('')","before":"element.","after":"('')", "division":"dom"},
        {"id":73,"otwet": "prepappend" , "vopros": "дабовлет новый элемент в начало указанного эллемента DOM", "good": "element.***('')", "before":"element.","after":"('')","division":"dom"},
        {"id":74,"otwet": "before" , "vopros": "дабовлет новый элемент перед указанным элементом DOM", "good": "element.***('')", "before":"element.","after":"('')","division":"dom"},
        {"id":75,"otwet": "after" , "vopros": "дабовлет новый элемент перед указанным элементом DOM", "good": "element.***('')","before":"element.","after":"('')", "division":"dom"},
        {"id":76,"otwet": "replaceWith" , "vopros": "дабовлет новый элемент вместо указанного элеммента DOM", "good": "element.***('')", "before":"element.","after":"('')","division":"dom"},
        {"id":77,"otwet": "remove" , "vopros": "удаляет эллемент DOM", "good": "element.***()", "before":"element.","after":"('')","division":"dom"},
        {"id":78,"otwet": "removeChild" , "vopros": "удаляет элемент дочерний DOM", "good": "element.***()","before":"element.","after":"('')", "division":"dom"},
        {"id":79,"otwet": "location" , "vopros": "Получает/устанавливает URL окна и его компоненты", "good": "window.***", "before":"window.","after":"","division":"dom"},
        {"id":80,"otwet": "from" , "vopros": "создаёт новый массив из массивоподобного или итерируемого объекта", "good": "Array.***()","before":"Array.","after":"()", "division":"arr"},
        {"id":81,"otwet": "innerHTML" , "vopros": "добовлет текст или элемент DOM", "good": "element.***", "before":"element.","after":"","division":"dom"},
        {"id":82,"otwet": "textContent" , "vopros": "добовляет текст элементу DOM", "good": "element.***", "before":"element.","after":"","division":"dom"},
        {"id":83,"otwet": "remove()" , "vopros": "удаляет элемент DOM", "good": "element.remove()", "before":"element.","after":"('')","division":"dom"},
        {"id":85,"otwet": "forEach" , "vopros": "функция для переборки массива", "good": "[].***(fun)", "before":"[].","after":"(()=>{})","division":"mas"},
        {"id":86,"otwet": "addEventListener" , "vopros": "отслеживатель событий на элементе DOM", "good": "element.***('событие', 'функция')", "before":"element.","after":"('click', ()=>{})","division":"dom"},
        {"id":87,"otwet": "bing" , "vopros": "возвращает функцию, которая при вызове устанавливает в качестве контекста выполнения this", "good": "fun.***(context,[arg])", "before":"function.","after":"(context,[arg])","division":"strnum"},
        {"id":88,"otwet": "call" , "vopros": "вызывает функцию с указанным значением this", "good": "fun.***(context,[arg])", "before":"function.","after":"(context,[arg])", "division":"strnum"},
        {"id":89,"otwet": "apply" , "vopros": "вызывает функцию с указанным значением this аргументы через массив", "good": "fun.***(context,[arg])", "before":"function.","after":"(context,[arg])","division":"strnum"},
        {"id":90,"otwet": "async" , "vopros": "добовляем перед функцией чтобсделать ее ассинхонной", "good": "*** function(){}", "before":"","after":"function(){}","division":"strnum"},
        {"id":91,"otwet": "parseInt" , "vopros": "принемает строку и возвращает целое число в соответствии с указанным основанием системы счисления", "good": "***(str)", "before":"","after":"(str)","division":"strnum"},
        {"id":92,"otwet": "toString" , "vopros": "возвращает строку, представляющую объект", "good": "obj.***()", "before":"","after":"()", "division":"strnum"}
    ],
"names":[
    {"id":1, "name": "strnum", "newname": "Числа и строки"},
    {"id":2, "name": "mas", "newname": "Масивы"},
    {"id":3, "name": "dom", "newname": "DOM"}
]

}
