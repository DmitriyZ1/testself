{"tasks":
    [
        {"id":1, "otwet": "typeof" , "vopros": "возвращает строку, указывающую тип операнда", "good":"","division":"strnum"},
        {"id":2,"otwet": "'text'.trim()" , "vopros": "удаляет пробелы", "good": "'text'.***()","division":"strnum"},
        {"id":3,"otwet": "Number('34')" , "vopros": "строку превращает в число", "good": "***('34')","division":"strnum"},
        {"id":4,"otwet": "String(12)" , "vopros": "переводит число в строку", "good": "***(12)","division":"strnum"},
        {"id":5,"otwet": "//.test('text')" , "vopros": "выполняет поиск регулярного выражения", "good": "'text'.***(//)","division":"strnum"},
        {"id":6,"otwet": "'text'.search(//)" , "vopros": "выполняет поиск совпаиний,-1 если не найдено", "good": "'text'.***(//)","division":"strnum"},
        {"id":7,"otwet": "'text'.replace(//, fun)" , "vopros": " возвращает новую строку с некоторыми или всеми сопоставлениями с шаблоном, заменёнными на заменитель", "good": "'text'.***(//, fun)","division":"strnum"},
        {"id":8,"otwet": "JSON.stringify(json)" , "vopros": "преобразует в строку JSON", "good": "JSON.***(json)","division":"strnum"},
        {"id":9,"otwet": "JSON.parse('str')" , "vopros": "парсируе строку в формат JSON", "good": "JSON.***('str')","division":"strnum"},
        {"id":10,"otwet": "parseFloat('str')" , "vopros": "отсекает у строки все лишнее оставляет число", "good": "***('str')","division":"strnum"},
        {"id":11,"otwet": "'text'.toLowerCase()" , "vopros": "строку в нижний регистр", "good": "'text'.***()","division":"strnum"},
        {"id":12,"otwet": "'text'.toUpperCase()" , "vopros": "строку в верхний регистр", "good": "'text'.***()","division":"strnum"},
        {"id":13,"otwet": "'str'.substr(index,index)" , "vopros": "возвращает указанное количество символов из строки, начиная с указанной позиции", "good": "'str'.***(index,index)","division":"strnum"},
        {"id":14,"otwet": "10.isInteger()" , "vopros": "проверяет является ли значение целым чеслом", "good": "10.***()","division":"strnum"},
        {"id":15,"otwet": "Math.ceil(10.2)" , "vopros": "Возвращает значение числа, округлённое к большему целому", "good": "Math.***(10.2)","division":"strnum"},
        {"id":16,"otwet": "Math.floor(10.2)" , "vopros": "Возвращает значение числа, округлённое к меньшему целому", "good": "Math.***(10.2)","division":"strnum"},
        {"id":17,"otwet": "Math.random()" , "vopros": "Возвращает псевдослучайное число в диапазоне от 0 до 1", "good": "Math.***()","division":"strnum"},
        {"id":18,"otwet": "Math.round(10.2)" , "vopros": "Возвращает значение числа, округлённое до ближайшего целого", "good": "Math.***(10.2)","division":"strnum"},
        {"id":19,"otwet": "Math.min(2,3)" , "vopros": "возвращает минимальное число из перечисляных через запятую", "good": "Math.***(2,3)","division":"strnum"},
        {"id":20,"otwet": "Math.max(2,4)" , "vopros": "возвращает максимальное число из перечисляных через запятую", "good": "Math.***(2,4)","division":"strnum"},
        {"id":21,"otwet": "for(let key in obj)" , "vopros": "цикл для перебора обьекта", "good": "for(let key ** obj)","division":"mas"},
        {"id":22,"otwet": "for(let item of arr)" , "vopros": " цтикл переберает значение массива", "good": "for(let item ** arr)","division":"mas"},
        {"id":23,"otwet": "[].map(fun)" , "vopros": "переберает массив и возвращает новый", "good": "[].***(fun)","division":"mas"},
        {"id":24,"otwet": "[].filter(fun)" , "vopros": "собирает новый массив с условиями", "good": "[].***(fun) ","division":"mas"},
        {"id":25,"otwet": "[].find(fun)" , "vopros": "ишет в массиве по условию возващает первоеинайденое значение", "good": "[].***(fun)","division":"mas"},
        {"id":26,"otwet": "[].reducer(fun)" , "vopros": "применяет к каждому элементу массива, возвращая результирующее значение", "good": "[].***(fun)","division":"mas"},
        {"id":27,"otwet": "[].some(fun)" , "vopros": "ишет в массиве по условию возващает true или false", "good": "[].***(fun)","division":"mas"},
        {"id":28,"otwet": "[].every(fun)" , "vopros": "проверяет, удовлетворяют ли все элементы массива условию, заданному в передаваемой функции", "good": "[].***(fun)","division":"mas"},
        {"id":29,"otwet": "[].push(10)" , "vopros": "добовляет элемент к конец массива", "good": "[].***(10)","division":"mas"},
        {"id":30,"otwet": "[].unshift(10)" , "vopros": "добовляет элемент в начало массива", "good": "[].***(10)","division":"mas"},
        {"id":31,"otwet": "[].pop()" , "vopros": "удаляет элемент из конца массива", "good": "[].***()","division":"mas"},
        {"id":32,"otwet": "[].shift()" , "vopros": "удаляет элемент из начала массива", "good": "[].***()","division":"mas"},
        {"id":33,"otwet": "[].slice(1,5)" , "vopros": " возв. новый масив содер копию части другого массива", "good": "[].***(1,5)","division":"mas"},
        {"id":34,"otwet": "[].splice(0, 2, 'x')" , "vopros": "изменяет содержимое массива, удаляя существующие элементы и/или добавляя новые", "good": "[].***(0, 2, 'x')","division":"mas"},
        {"id":35,"otwet": "'str'.split('')" , "vopros": "разбирает строку на массив", "good": "'str'.***('')","division":"mas"},
        {"id":36,"otwet": "[].join('')" , "vopros": "массив преобразует в строку", "good": "[].***('')","division":"mas"},
        {"id":37,"otwet": "[].sort(fun)" , "vopros": "сортирует массив", "good": "[].***(fun)","division":"mas"},
        {"id":38,"otwet": "[].reverse()" , "vopros": "переворачивает массив", "good": "[].***()","division":"mas"},
        {"id":39,"otwet": "[].findIndex(fun)" , "vopros": "ишет в массиве по условию возвращает индекс", "good": "[].findIndex(fun)","division":"mas"},
        {"id":40,"otwet": "[...arr]" , "vopros": "операор распостранения (разворачивает массив)", "good": "[***arr]", "division":"mas"},
        {"id":41,"otwet": "[].flat()" , "vopros": "возвращает новый массив, в котором все элементы вложенных подмассивов были рекурсивно 'подняты'", "good": "[].***()","division":"mas"},
        {"id":42,"otwet": "[].fill(3)" , "vopros": "заполняет массив с указанной позиции определенным символом", "good": "[].***(3)","division":"mas"},
        {"id":43,"otwet": "[].concat([])" , "vopros": "соединяет массивы в один", "good": "[].***([])","division":"mas"},
        {"id":44,"otwet": "new Set(arr)" , "vopros": "позволяют вам сохранять уникальные значения любого типа", "good": "new ***(arr)","division":"mas"},
        {"id":45,"otwet": "[].includes(2)" , "vopros": "определяет, содержит ли массив определённый элемент, возвращая в зависимости от этого true или false", "good": "[].***(2)","division":"mas"},
        {"id":46,"otwet": "[].indexOf('x')" , "vopros": "проверка на наличие в массиве, строке -1 если не найдено", "good": "[].***('x')","division":"mas"},
        {"id":47,"otwet": "Object.keys({})" , "vopros": "создает массив из ключей обьекта", "good": "Object.***({})","division":"mas"},
        {"id":48,"otwet": "Object.values({})" , "vopros": "создает массив из значений обьекта", "good": "Object.***({})","division":"mas"},
        {"id":49,"otwet": "Array.isArray(x)" , "vopros": "проверка на массив", "good": "Array.***(x)","division":"mas"},
        {"id":50,"otwet": "document" , "vopros": "глобальный обьект для работы с дом", "good": "1","division":"dom"},
        {"id":51,"otwet": "document.documentElement" , "vopros": "свойство возвращает корневой элемент HTML", "good": "document.***","division":"dom"},
        {"id":52,"otwet": "window.getComputedStyle(елемент, псевдоэлеиент)" , "vopros": "возвращает объект, содержащий значения всех CSS-свойств элемента", "good": "window.***(елемент, псевдоэлеиент)","division":"dom"},
        {"id":53,"otwet": "element.style.color=''" , "vopros": "свойство добовляет стиль элементу DOM", "good": "element.***.color=''","division":"dom"},
        {"id":54,"otwet": "element.classList.add('')" , "vopros": "Добавляет элементу DOM указанные классы", "good": "element.***.***('')","division":"dom"},
        {"id":55,"otwet": "element.classList.remove('')" , "vopros": "Удаляет у элемента DOM указанные классы", "good": "element.***.***('')","division":"dom"},
        {"id":56,"otwet": "element.classList.item('')" , "vopros": "Результат аналогичен вызову сlassList[Number]", "good": "element.classList.***('')","division":"dom"},
        {"id":57,"otwet": "element.classList.toggle('')" , "vopros": "Если класс у элемента DOM отсутствует - добавляет, иначе - убирает", "good": "element.***.***('')","division":"dom"},
        {"id":58,"otwet": "element.classList.contains('')" , "vopros": "проверяет наличие класса", "good": "element.***.***('')","division":"dom"},
        {"id":59,"otwet": "document.createElement('')" , "vopros": "создание элемента DOM", "good": "document.***('')","division":"dom"},
        {"id":60,"otwet": "element.prepend('')" , "vopros": "вставляет элементы DOM перед первым потокоm", "good": "element.***('')","division":"dom"},
        {"id":61,"otwet": "element.parentNode" , "vopros": "свойство получаем родителя текущего элемента DOM", "good": "element.***","division":"dom"},
        {"id":62,"otwet": "element.nextSibling" , "vopros": "следующий узел  в списке дочерних элментов DOM", "good": "element.***","division":"dom"},
        {"id":63,"otwet": "element.firstChild" , "vopros": "возвращает текст внутри элемента DOM", "good": "element.***","division":"dom"},
        {"id":64,"otwet": "element.firstElementChild" , "vopros": "возвращает первый дочерний элемент DOM", "good": "element.***","division":"dom"},
        {"id":65,"otwet": "element.closest('')" , "vopros": "ближайший родитель с указанным селектором DOM", "good": "element.***('')","division":"dom"},
        {"id":66,"otwet": "element.setAttrebute('атрибут','значение')" , "vopros": "добовляет атрибут элементу DOM", "good": "element.***('атрибут','значение')","division":"dom"},
        {"id":67,"otwet": "element.getAttrebute('')" , "vopros": " читает аттрибут DOM", "good": "element.***('')","division":"dom"},
        {"id":68,"otwet": "element.hasAttrebute('')" , "vopros": "проверяет аттрибут элемента DOM возвращае true folse ", "good": "element.***('')","division":"dom"},
        {"id":69,"otwet": "element.removeAttrebute('')" , "vopros": "удаляет атрибут элемента DOM ", "good": "element.***('')","division":"dom"},
        {"id":70,"otwet": "element.dataset" , "vopros": "получаем атрибут data у элемента DOM", "good": "element.***","division":"dom"},
        {"id":71,"otwet": "element.appendChild('')" , "vopros": "дабовлет новый элемент DOM в конец родителя", "good": "element.***('')","division":"dom"},
        {"id":72,"otwet": "element.append('')" , "vopros": "дабовлет новый элемент в конец  указанного эллемента DOM", "good": "element.***('')","division":"dom"},
        {"id":73,"otwet": "element.prepappend('')" , "vopros": "дабовлет новый элемент в начало указанного эллемента DOM", "good": "element.***('')","division":"dom"},
        {"id":74,"otwet": "element.before('')" , "vopros": "дабовлет новый элемент перед указанным элементом DOM", "good": "element.***('')","division":"dom"},
        {"id":75,"otwet": "element.after('')" , "vopros": "дабовлет новый элемент перед указанным элементом DOM", "good": "element.***('')","division":"dom"},
        {"id":76,"otwet": "element.replaceWith('')" , "vopros": "дабовлет новый элемент вместо указанного элеммента DOM", "good": "element.***('')","division":"dom"},
        {"id":77,"otwet": "element.remove()" , "vopros": "удаляет эллемент DOM", "good": "element.***()","division":"dom"},
        {"id":78,"otwet": "element.removeChild()" , "vopros": "удаляет элемент дочерний DOM", "good": "element.***()","division":"dom"},
        {"id":79,"otwet": "window.location" , "vopros": "Получает/устанавливает URL окна и его компоненты", "good": "window.***","division":"dom"},
        {"id":80,"otwet": "Array.from()" , "vopros": "создаёт новый массив из массивоподобного или итерируемого объекта", "good": "Array.***()","division":"arr"},
        {"id":81,"otwet": "element.innerHTML" , "vopros": "добовлет текст или элемент DOM", "good": "element.***","division":"dom"},
        {"id":82,"otwet": "element.textContent" , "vopros": "добовляет текст элементу DOM", "good": "element.***","division":"dom"},
        {"id":83,"otwet": "element.remove()" , "vopros": "удаляет элемент DOM", "good": "element.remove()","division":"dom"},
        {"id":84,"otwet": "createdocumentfragment()" , "vopros": "кладем созданные элементы(createEllement()) а затем присоединения этого фрагмента к основному дереву", "good": "1","division":"dom"},
        {"id":85,"otwet": "[].forEach(fun)" , "vopros": "функция для переборки массива", "good": "[].***(fun)","division":"mas"},
        {"id":86,"otwet": "element.addEventListener('событие', 'функция')" , "vopros": "отслеживатель событий на элементе DOM", "good": "element.***('событие', 'функция')","division":"dom"},
        {"id":87,"otwet": "fun.bing(context,[arg])" , "vopros": "возвращает функцию, которая при вызове устанавливает в качестве контекста выполнения this", "good": "fun.***(context,[arg])","division":"strnum"},
        {"id":88,"otwet": "fun.call(context,[arg])" , "vopros": "вызывает функцию с указанным значением this", "good": "fun.***(context,[arg])","division":"strnum"},
        {"id":89,"otwet": "fun.apply(context,[arg])" , "vopros": "вызывает функцию с указанным значением this аргументы через массив", "good": "fun.***(context,[arg])","division":"strnum"},
        {"id":90,"otwet": "async function(){}" , "vopros": "добовляем перед функцией чтобсделать ее ассинхонной", "good": "*** function(){}","division":"strnum"},
        {"id":91,"otwet": "parseInt(str)" , "vopros": "принемает строку и возвращает целое число в соответствии с указанным основанием системы счисления", "good": "***(str)","division":"strnum"},
        {"id":92,"otwet": "obj.toString()" , "vopros": "возвращает строку, представляющую объект", "good": "obj.***()", "division":"strnum"}
    ],
"names":[
    {"id":1, "name": "strnum", "newname": "Числа и строки"},
    {"id":2, "name": "mas", "newname": "Масивы"},
    {"id":3, "name": "dom", "newname": "DOM"}
]

}
